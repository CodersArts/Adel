import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;

public class ShortestPath {
	static int  total_number_of_shortest_paths=0;
	static int  total_number_of_shortest_paths_withV=0;
	// Prints all paths from
    // 's' to 'd'
    public static void printAllPaths(ArrayList<Integer> adjList[],int s, int d,int v,int betv)  {
        boolean[] isVisited = new boolean[v];
        ArrayList<Integer> pathList = new ArrayList<>();
         
        //add source to path[]
        pathList.add(s);
         
        //Call recursive utility
        printAllPathsUtil(s, d, isVisited, pathList,adjList,betv);
    }
 // A recursive function to print
    // all paths from 'u' to 'd'.
    // isVisited[] keeps track of
    // vertices in current path.
    // localPathList<> stores actual
    // vertices in the current path
    private static void printAllPathsUtil(Integer u, Integer d,
                                    boolean[] isVisited,
                            List<Integer> localPathList,ArrayList<Integer> adjList[],int betv) {
         
        // Mark the current node
        isVisited[u] = true;
         
        if (u.equals(d)) 
        {
        		if(localPathList.contains(betv))
        					total_number_of_shortest_paths_withV++;
        		
        			total_number_of_shortest_paths++;
           // System.out.println(localPathList);
        }
         
        // Recur for all the vertices
        // adjacent to current vertex
        for (Integer i : adjList[u]) 
        {
            if (!isVisited[i])
            {
                // store current node 
                // in path[]
                localPathList.add(i);
                printAllPathsUtil(i, d, isVisited, localPathList,adjList,betv);
                 
                // remove current node
                // in path[]
                localPathList.remove(i);
            }
        }
         
        // Mark the current node
        isVisited[u] = false;
    }
	public static int  degree_centrality(ArrayList<Integer> adj[]){
		int d_centrality=0;
		for(int i=0;i<adj.length;i++){
					if(adj[i].size()>d_centrality)
							d_centrality=adj[i].size();
		}
		return d_centrality;	
	}
	public static float closeness_centrality(ArrayList<Integer> adj[] ,int dest,int v){
		int sum=0;
		float closeness=0.00f;
		for(int i=0;i<adj.length;i++){
				if(i!=dest)
						sum+=printShortestDistance(adj, dest, i, v);		
		}
		closeness=(float) (1.00f/(float)sum);
		return closeness;	
	}
	public static float betweenness_centrality(ArrayList<Integer> adj[] ,int src,int dest,int numberOfVertex,int betv){	
		printAllPaths(adj,src, dest,numberOfVertex, betv);
		float closeness;
		closeness=(total_number_of_shortest_paths_withV/total_number_of_shortest_paths);
		return closeness;	
	}
	public static float katz_Centrality(ArrayList<Integer> adj[],float alpha){
		float karzSum;
		float max=Float.MIN_VALUE;
		for(int i=0;i<adj.length;i++){
			 karzSum=adj[i].size()*alpha;
			 for (Integer u : adj[i]) {
				 karzSum+=adj[u].size()*alpha;    
		        }
			 if(karzSum>max)
				 max=karzSum;
		}
		
		return max;
	}
	// utility function to form edge between two vertices
	// source and dest
	public static void add_edge(ArrayList<Integer> adj[], int src, int dest){
		adj[src].add(dest);
		adj[dest].add(src);
	}
	// a modified version of BFS that stores predecessor
	// of each vertex in array p
	// and its distance from source in array d
	static boolean BFS(ArrayList<Integer> adj[], int src, int dest, int v,
								int pred[], int dist[])
	{
		// a queue to maintain queue of vertices whose
		// adjacency list is to be scanned as per normal
		// DFS algorithm
		Queue<Integer> queue = new LinkedList<Integer>();

		// boolean array visited[] which stores the
		// information whether ith vertex is reached
		// at least once in the Breadth first search
		boolean visited[] = new boolean[v];

		// initially all vertices are unvisited
		// so v[i] for all i is false
		// and as no path is yet constructed
		// dist[i] for all i set to infinity
		for (int i = 0; i < v; i++) {
			visited[i] = false;
			dist[i] =Integer.MAX_VALUE;
			pred[i] = -1;
		}

		// now source is first to be visited and
		// distance from source to itself should be 0
		visited[src] = true;
		dist[src] = 0;
		queue.add(src);

		// standard BFS algorithm
		while (!queue.isEmpty()) {
			int u = queue.peek();
			queue.poll();
			for (int i = 0; i < adj[u].size(); i++) {
				if (visited[adj[u].get(i)] == false) {
					visited[adj[u].get(i)] = true;
					dist[adj[u].get(i)] = dist[u] + 1;
					pred[adj[u].get(i)] = u;
					queue.add(adj[u].get(i));

					// We stop BFS when we find
					// destination.
					if (adj[u].get(i) == dest)
					return true;
				}
			}
		}

		return false;
	}

	// utility function to print the shortest distance 
	// between source vertex and destination vertex
	static int printShortestDistance(ArrayList<Integer> adj[], int s, 
										int dest, int v)
	{
		// predecessor[i] array stores predecessor of
		// i and distance array stores distance of i
		// from s
		int pred[] = new int[v];
		int dist[] = new int[v];

		if (BFS(adj, s, dest, v, pred, dist) == false)
		{
			System.out.println("Given source and destination"+" are not connected");
			return 0;
		}

		// vector path stores the shortest path
		ArrayList<Integer> path = new ArrayList<Integer>();
		int crawl = dest;
		path.add(crawl);
		while (pred[crawl] != -1) {
			path.add(pred[crawl]);
			crawl = pred[crawl];
		}

		// distance from source is in distance array
		//System.out.println( "Shortest path length is : "+dist[dest]);
	

		// printing path from source to destination
		/*
		System.out.println("\nPath is::");
		for (int i = path.size() - 1; i >= 0; i--)
			System.out.print(path.get(i)+" ");
		*/	
		return dist[dest];
	} 

	public static void main(String[] args) {
		int numberOfVertex=0;
		Map<String,Integer> vertexList=new HashMap<String,Integer> ();
		ArrayList<String> srcList=new ArrayList<String>();
		ArrayList<String> dstList=new ArrayList<String>();
		try {
			File file = new File("dataset1.txt");
			FileReader fileReader = new FileReader(file);
			BufferedReader bufferedReader = new BufferedReader(fileReader);
			String line;
			int i=0;
			while ((line = bufferedReader.readLine()) != null) {
				String vertex1=line.split(" ")[0];
				String vertex2=line.split(" ")[1];
				srcList.add(vertex1);
				dstList.add(vertex2);
					if(!vertexList.containsKey(vertex1)){
						vertexList.put(vertex1, i);
						i++;
					}
					if(!vertexList.containsKey(vertex2)){
						vertexList.put(vertex2, i);
						i++;
					}
			}
			fileReader.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		numberOfVertex=vertexList.size();
		ArrayList<Integer> adj[] = new ArrayList[numberOfVertex];
		for(int i=0;i<numberOfVertex;i++){
				adj[i]=new ArrayList<Integer>();		
		}
		for(int i=0;i<srcList.size();i++){
			//System.out.println( vertexList.get(srcList.get(i))+","+vertexList.get(dstList.get(i)));
			add_edge(adj, vertexList.get(srcList.get(i)), vertexList.get(dstList.get(i)));	
	}
		System.out.println("No of vertex:"+numberOfVertex);
		int src=vertexList.get("759251");
		int dest=vertexList.get("22958682");
		//System.out.println("Shortest Path: "+printShortestDistance(adj, 1,10 , numberOfVertex));
		
		//Degree centrality
		System.out.println("Degree centrality: "+degree_centrality(adj));
		
		//Closeness centrality:
		int closenessv=vertexList.get("759251");
		System.out.println("Closeness centrality of close( "+closenessv+"): "+closeness_centrality(adj,closenessv,numberOfVertex));
		
		// Katz Centrality
				float aplha=0.50f;
				System.out.println("Katz Centrality: "+katz_Centrality(adj,aplha));
		
		//Betweenness centrality
		int betv=vertexList.get("759251");
		System.out.println("Betweenness centrality betv( "+betv+"): "+betweenness_centrality(adj,src,dest,numberOfVertex,betv));
		 
		
	}

}
